{"version":3,"sources":["Step.tsx","Form.tsx","FormStep.tsx","App.tsx","serviceWorker.ts","index.tsx","DAN.JPG"],"names":["variants","hidden","opacity","visible","Step","data","handleClick","div","initial","animate","transition","duration","src","img","height","texts","map","text","index","key","onClick","Form","setIframe","useState","word","setWord","textColor","setTextColor","error","setError","type","onChange","e","target","value","required","className","defaultValue","slice","toUpperCase","FormStep","wordApi","textColorApi","window","innerHeight","innerWidth","setSrc","setData","selectForm","setSelectForm","liked","setLiked","iframe","id","frameBorder","scrolling","width","button","formData","FormData","append","fetch","mode","method","body","p","steps","logo","fetched","App","step","setStep","setColor","then","a","json","res","image_text","image_text_color","catch","length","Boolean","location","hostname","match","console","log","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.cf117df2.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n// @ts-ignore\nimport { motion } from \"framer-motion\";\n\nconst variants = {\n    hidden: { opacity: 0 },\n    visible: { opacity: 1 },\n};\n\n// @ts-ignore\nconst Step = ({ data, handleClick }) => {\n    return <motion.div initial=\"hidden\" animate=\"visible\" variants={variants} transition={{ duration: 2 }}>\n        <img src={data.img} height='250' />\n        {data.texts.map(\n            (text: any, index: any) => <p key={index}>{text}</p>\n        )}\n        <button onClick={handleClick}>Далее</button>\n    </motion.div>\n};\n\nexport default Step;\n","import React, { useState } from 'react';\nimport './App.css';\n// @ts-ignore\nimport { motion } from \"framer-motion\";\n\nconst variants = {\n    hidden: { opacity: 0 },\n    visible: { opacity: 1 },\n};\n\n// @ts-ignore\nconst Form = ({ setIframe }) => {\n    const [word, setWord] = useState('');\n    const [textColor, setTextColor] = useState('#dfff59');\n    const [error, setError] = useState(false);\n\n    const onTestClick = () => {\n        if (!word) {\n            setError(true);\n            return;\n        }\n\n        setIframe(word, textColor.slice(1).toUpperCase());\n    }\n\n    const onWordChange = (e: { target: { value: React.SetStateAction<string>; }; }) => {\n        setWord(e.target.value);\n        setError(!e.target.value);\n    }\n\n    return (\n        <motion.div initial=\"hidden\" animate=\"visible\" variants={variants} transition={{ duration: 2 }}>\n            <label>\n                Поиграем в слова. Если бы ты мог описать своё состояние одним словом, что это было бы за слово?\n                Выбери слово, которым бы ты описал своё будущее.\n                Выбери слово, которое тебя вдохновляет! Это слово, которое тебе нравится. Оно красивое. Тебе нравится его слышать, произносить, видеть в книгах или в сообщениях от друзей... Оно заряжает и мотивирует. Поделись с нами этим словом. Прямо здесь. Прямо сейчас\n                <input\n                    key='word'\n                    type='text'\n                    onChange={onWordChange}\n                    required\n                    className={error ? 'error' : 'valid'}\n                    defaultValue={word}\n                />\n            </label>\n            <label>\n                Неплохо. Как насчёт цветов? Когда ты видишь это слово. С каким цветом оно ассоциируется?\n                <input key='color' type='color' onChange={(e) => setTextColor(e.target.value)} defaultValue='#dfff59' />\n            </label>\n            <button onClick={onTestClick}>Дальше</button>\n        </motion.div>\n    );\n}\n\nexport default Form;\n","import React, {useState} from 'react';\nimport './App.css';\nimport Form from \"./Form\";\n// @ts-ignore\nimport { motion } from \"framer-motion\";\n\nconst variants = {\n    hidden: { opacity: 0 },\n    visible: { opacity: 1 },\n};\n\n// @ts-ignore\nconst FormStep = ({ wordApi = '', textColorApi = '000000' }) => {\n    const [src, setSrc] = useState(wordApi ?\n        `//ntmaker.gfto.ru/newneontext/?image_height=${window.innerHeight}&image_width=${window.innerWidth}&image_font_shadow_width=30&image_font_size=100&image_background_color=000000&image_text_color=${textColorApi}&image_font_shadow_color=${textColorApi}&image_url=&image_text=${wordApi}&image_font_family=Nickainley&` :\n        'about:blank'\n    );\n    const [data, setData] = useState({ word: wordApi, textColor: textColorApi });\n    const [selectForm, setSelectForm] = useState(wordApi ? false : true);\n    const [liked, setLiked] = useState(wordApi ? true : false);\n\n    const setIframe = (word: any, textColor: any) => {\n        setSrc(`//ntmaker.gfto.ru/newneontext/?image_height=${window.innerHeight}&image_width=${window.innerWidth}&image_font_shadow_width=30&image_font_size=100&image_background_color=000000&image_text_color=${textColor}&image_font_shadow_color=${textColor}&image_url=&image_text=${word}&image_font_family=Nickainley&`)\n        setData({ word, textColor });\n        if (word) {\n            setSelectForm(false);\n        }\n    };\n\n    const sendWord = () => {\n        const formData = new FormData();\n\n        formData.append('image_text', data.word);\n        formData.append('image_text_color', data.textColor);\n\n        fetch('http://kirdan.ru', {\n            mode: 'no-cors',\n            method: 'post',\n            body: formData\n        });\n        setLiked(true);\n    };\n\n    const handleBack = () => {\n        setSelectForm(true);\n    };\n\n    return (\n        <div className=\"App\">\n            {!wordApi && selectForm &&\n                <Form setIframe={setIframe} />\n            }\n            <div>\n                {!selectForm && <motion.iframe\n                    id='frame' src={src} frameBorder='no' scrolling='no' width={window.innerWidth} height={window.innerHeight}\n                    initial=\"hidden\" animate=\"visible\" variants={variants} transition={{ duration: 2 }}\n                />}\n                <div className='buttons'>\n                    {!selectForm && !wordApi && !liked &&\n                    <motion.button onClick={handleBack} initial=\"hidden\" animate=\"visible\" variants={variants} transition={{ duration: 2 }}>Назад</motion.button>\n                    }\n                    {!selectForm && !wordApi && !liked &&\n                    <motion.button onClick={sendWord} initial=\"hidden\" animate=\"visible\" variants={variants} transition={{ duration: 2 }}>Мне нравится</motion.button>\n                    }\n                </div>\n                {liked && <motion.p initial=\"hidden\" animate=\"visible\" variants={variants} transition={{ duration: 2 }}>\n                    Помнится, ты говорил, что это прикольно) мы тоже так подумали. Скоро у тебя появится такая настоящая! Надеемся, что она будет тебя вдохновлять и мотивировать в любом месте, куда ты ее повесишь 😍 Классные мы?\n                    Помимо шуток, хотим тебе сказать, что рады дружбе с тобой, желаем гармонии, дзена, отдыха, интересных задач, новых мест и удовольствия ото всего, что ты делаешь. Мы рядом и очень тебя любим♥️\n                </motion.p>}\n            </div>\n        </div>\n    );\n}\n\nexport default FormStep;\n","import React, { useState } from 'react';\n// @ts-ignore\nimport logo from './DAN.JPG';\nimport './App.css';\n// @ts-ignore\nimport Step from \"./Step.tsx\";\nimport FormStep from \"./FormStep\";\n\nconst steps: any[] = [{\n    texts: [\n        'Даниил!',\n        'Общественное движение ДаНаСра поздравляет Вас с Днём рождения.'\n    ],\n    img: logo\n},\n{\n    img: logo,\n    texts: ['Для начала мы хотим сказать тебе несколько тёплых слов.', 'Во-первых, мы тебя любим.', 'Во-вторых, каждому из нас есть что тебе сказать.']\n}, {\n    img: logo,\n    texts: ['Текст от Ани']\n}, {\n    img: logo,\n    texts: ['Текст от Роберта']\n}, {\n    img: logo,\n    texts: ['Текст от Наташи']\n}, {\n    img: logo,\n    texts: ['Текст от Сани']\n}, {\n    img: logo,\n    texts: [\n        'Конечно, ты знаешь, что мы не станем просто так дарить тебе подарок. Простой подарок. Например, прыжок с парашютом или носки - это все банально. Вообще это не подарок, это поздравление. Да и не поздравление, а приятные слова тебе. Ты успешен в работе, в саморазвитии, ты очень много думаешь. Постоянно. Плиз, сегодня просто расслабься и не пытайся рационализировать. Ты в руках надежных друзей, ну ты уже сам все понял. Все, что тебе надо сделать - это закрыть глаза... но не сейчас. Сначала дочитай.'\n    ]\n}, {\n    img: logo,\n    texts: [\n        'Тебе сегодня 24. Сколько ты успел? Что ожидал от этого возраста? Что получилось? Кажется, получилось многое) Как ты себя ощущаешь?'\n    ]\n}];\nlet fetched = false;\n\nconst App: React.FC = () => {\n    const [step, setStep] = useState(0);\n    const [word, setWord] = useState('');\n    const [textColor, setColor] = useState('000000');\n\n    if (!fetched) {\n        fetch('http://kirdan.ru', {\n            mode: 'cors',\n            method: 'post',\n        })\n            .then(async data => {\n                const res = await data.json();\n\n                fetched = true;\n                setWord(res.image_text);\n                setColor(res.image_text_color);\n            })\n            .catch(() => {\n            });\n    }\n\n    const nextStep = () => {\n        setStep(step + 1);\n    };\n\n    return <div className=\"App\">\n        <main>\n            {step === steps.length ?\n                <FormStep wordApi={word} textColorApi={textColor}/> :\n                <Step data={steps[step]} handleClick={nextStep} key={step} />\n            }\n        </main>\n        <footer>Created by danasra (c) 2019</footer>\n    </div>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconsole.log('%cДаня, не ломай ничего пожалуйста. Закрой консоль и получай удовольствие.', 'color: white; background-color: red; font-size: 16px;');\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/DAN.b33dcae3.JPG\";"],"sourceRoot":""}