{"version":3,"sources":["DAN.JPG","Step.tsx","Form.tsx","FormStep.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Step","data","handleClick","Fragment","texts","map","text","index","key","onClick","Form","setIframe","useState","word","setWord","textColor","setTextColor","type","onChange","e","target","value","slice","toUpperCase","FormStep","wordApi","textColorApi","src","setSrc","setData","className","id","frameBorder","scrolling","width","height","formData","FormData","append","fetch","mode","method","body","steps","fetched","App","step","setStep","setColor","then","a","json","res","image_text","image_text_color","catch","logo","alt","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.10f1a4ec.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/DAN.b33dcae3.JPG\";","import React from 'react';\nimport './App.css';\n\n// @ts-ignore\nconst Step = ({ data, handleClick }) => {\n    return <React.Fragment>\n        {data.texts.map(\n            (text: any, index: any) => <div key={index}>{text}</div>\n        )}\n        <button onClick={handleClick}>Далее</button>\n    </React.Fragment>\n};\n\nexport default Step;\n","import React, { useState } from 'react';\nimport './App.css';\n\n// @ts-ignore\nconst Form = ({ setIframe }) => {\n    const [word, setWord] = useState('');\n    const [textColor, setTextColor] = useState('#000000');\n\n    const onTestClick = () => {\n        setIframe(word, textColor.slice(1).toUpperCase());\n    }\n\n    return (\n        <div>\n            <label>\n                Вот это объяснение что надо ввести\n                <input key='word' type='text' onChange={(e) => setWord(e.target.value)} />\n            </label>\n            <label>\n                Вот это объяснение по цвету\n                <input key='color' type='color' onChange={(e) => setTextColor(e.target.value)} />\n            </label>\n            <button onClick={onTestClick}>Попробовать</button>\n        </div>\n    );\n}\n\nexport default Form;\n","import React, {useState} from 'react';\n// @ts-ignore\nimport logo from './DAN.JPG';\nimport './App.css';\nimport Form from \"./Form\";\n\n// @ts-ignore\nconst FormStep = ({ wordApi = '', textColorApi = '000000' }) => {\n    const [src, setSrc] = useState(wordApi ?\n        `//ntmaker.gfto.ru/newneontext/?image_height=200&image_width=600&image_font_shadow_width=30&image_font_size=80&image_background_color=1F1F1F&image_text_color=${textColorApi}&image_font_shadow_color=${textColorApi}&image_url=&image_text=${wordApi}&image_font_family=Nickainley&` :\n        'about:blank'\n    );\n    const [data, setData] = useState({ word: wordApi, textColor: textColorApi });\n\n    const setIframe = (word: any, textColor: any) => {\n        setSrc(`//ntmaker.gfto.ru/newneontext/?image_height=200&image_width=600&image_font_shadow_width=30&image_font_size=80&image_background_color=1F1F1F&image_text_color=${textColor}&image_font_shadow_color=${textColor}&image_url=&image_text=${word}&image_font_family=Nickainley&`)\n        setData({ word, textColor });\n    };\n\n    const sendWord = () => {\n        const formData = new FormData();\n\n        formData.append('image_text', data.word);\n        formData.append('image_text_color', data.textColor);\n\n        fetch('http://kirdan.ru', {\n            mode: 'no-cors',\n            method: 'post',\n            body: formData\n        });\n    };\n\n    return (\n        <div className=\"App\">\n            {!wordApi &&\n                <Form setIframe={setIframe} />\n            }\n            <iframe id='frame' src={src} frameBorder='no' scrolling='no' width=\"600\" height=\"200\" />\n            {!wordApi &&\n                <button onClick={sendWord}>Подтвердить</button>\n            }\n        </div>\n    );\n}\n\nexport default FormStep;\n","import React, {useEffect, useLayoutEffect, useRef, useState} from 'react';\n// @ts-ignore\nimport logo from './DAN.JPG';\nimport './App.css';\n// @ts-ignore\nimport Step from \"./Step.tsx\";\nimport FormStep from \"./FormStep\";\n\nconst steps: any[] = [{\n  texts: ['test', 'test', 'test']\n}, {\n  texts: ['mygod']\n}];\nlet fetched = false;\n\nconst App: React.FC = () => {\n  const [step, setStep] = useState(0);\n  const [word, setWord] = useState('');\n  const [textColor, setColor] = useState('000000');\n\n  if (!fetched) {\n    fetch('http://kirdan.ru', {\n      mode: 'cors',\n      method: 'post',\n    })\n        .then(async data => {\n          const res = await data.json();\n\n          fetched = true;\n          setWord(res.image_text);\n          setColor(res.image_text_color);\n        })\n        .catch(() => {});\n  }\n\n  const nextStep = () => {\n    setStep(step + 1);\n  };\n\n  return <div className=\"App\">\n    <img src={logo} className=\"App-logo\" alt=\"Daniil\"/>\n    <div>Даниил, с днем рождения</div>\n    {step === steps.length ?\n        <FormStep wordApi={word} textColorApi={textColor} /> :\n        <Step data={steps[step]} handleClick={nextStep}/>\n    }\n  </div>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}